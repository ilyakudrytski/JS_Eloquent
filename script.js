// 1 triangle
// for (list = "#"; list.length < 8; list += "#") {
//     console.log(list)
// }

/* 2 FizzBuzz. Напишите программу, которая выводит через console.log все числа от 1 до 100, с двумя исключениями.
 Для чисел, нацело делящихся на 3, она должна выводить ‘Fizz’, а для чисел, делящихся на 5 (но не на 3) – ‘Buzz’.
 Когда сумеете – исправьте её так, чтобы она выводила «FizzBuzz» для всех чисел, которые делятся и на 3 и на 5.*/

// for (let i = 1; i < 100; i++) {
//     if (i % 3 === 0 && i % 5 === 0) {
//         console.log('FizzBuzz')
//     } else if (i % 3 === 0) {
//         console.log('Fizz')
//     } else if (i % 5 === 0) {
//         console.log('Buzz')
//     }
//     console.log(i)
// }

/* 3 Шахматная доска. Напишите программу, создающую строку, содержащую решётку 8х8,
 в которой линии разделяются символами новой строки. 
На каждой позиции либо пробел, либо #. В результате должна получиться шахматная доска.*/

// const size = 8
// let board = ""
// for (let y = 0; y < size; y++) {
//     for (let x = 0; x < size; x++) {
//         if ((x + y) % 2 == 0)
//             board += " ";
//         else
//             board += "#";
//     }
//     board += "\n";
// }

// console.log(board);

/* 4 Минимум. Напишите функцию min, принимающую два аргумента, и возвращающую минимальный из них.*/

// const min = (a, b) => {
//     if (a < b) {
//         console.log(a)
//     } else {
//         console.log(b)
//     }

// }
// min(24, 8)

/* 5 Рекурсия. Ноль чётный. Единица нечётная. У любого числа N чётность такая же, как у N-2.
Напишите рекурсивную функцию isEven согласно этим правилам.
 Она должна принимать число и возвращать булевское значение. Потестируйте её на 50 и 75.
 Попробуйте задать ей -1. Почему она ведёт себя таким образом? Можно ли её как-то исправить? */

// function isEven(n) {
//     if (n == 0)
//         return true;
//     else if (n == 1)
//         return false;
//     else if (n < 0)
//         return isEven(-n);
//     else
//         return isEven(n - 2);
// }
// console.log(isEven(50));
// console.log(isEven(75));
// console.log(isEven(-1));

/* 6 Считаем бобы. Символ номер N строки можно получить, добавив к ней .charAt(N)
 ( “строчка”.charAt(5) ) – схожим образом с получением длины строки при помощи .length.
  Возвращаемое значение будет строковым, состоящим из одного символа (к примеру, “к”).
   У первого символа строки позиция 0, что означает, что у последнего символа позиция будет string.length – 1.
    Другими словами, у строки из двух символов длина 2, а позиции её символов будут 0 и 1.
Напишите функцию countBs, которая принимает строку в качестве аргумента, и возвращает количество символов “B”,
 содержащихся в строке.Затем напишите функцию countChar, которая работает примерно как countBs,
  только принимает второй параметр — символ, который мы будем искать в строке
   (вместо того, чтобы просто считать количество символов “B”). Для этого переделайте функцию countBs. */

// const countBs = str => {
//     let counter = 0
//     for (let i = 0; i < str.length; i++) {
//         if (str.charAt(i) === 'B') {
//             counter += 1
//         }
//     }
//     console.log(counter)
// }
// countBs('Bubble BuBB')

// const countChar = (str, symb) => {
//     let counter = 0
//     for (let i = 0; i < str.length; i++) {
//         if (str.charAt(i) === symb) {
//             counter += 1
//         }
//     }
//     console.log(counter)
// }

// countChar('Bubble Bulb', 'b')

/*Сумма диапазона.  Напишите функцию range, принимающую два аргумента, начало и конец диапазона,
 и возвращающую массив, который содержит все числа из него, включая начальное и конечное.
 Затем напишите функцию sum, принимающую массив чисел и возвращающую их сумму.
  Запустите указанную выше инструкцию и убедитесь, что она возвращает 55.
  В качестве бонуса дополните функцию range, чтобы она могла принимать необязательный третий аргумент 
  – шаг для построения массива. Если он не задан, шаг равен единице. Вызов функции range(1, 10, 2)
   должен будет вернуть [1, 3, 5, 7, 9]. 
Убедитесь, что она работает с отрицательным шагом так, что вызов range(5, 2, -1) возвращает [5, 4, 3, 2]. */

// const range = (num1, num2, step) => {
//     const arr = []
//     if (step > 0) {
//         for (let i = num1; i <= num2; i += step) {
//             arr.push(i)
//         }
//         console.log(arr)
//     } else if (step < 0) {
//         for (let i = num1; i >= num2; i += step) {
//             arr.push(i)
//         }
//         console.log(arr)
//     }

// }
// range(5, 2, -1)


// const sum = (range) => {
//     let total = 0
//     let newArr = range

//     for (let i = 0; i < newArr.length; i++) {
//         total += newArr[i]
//     }
//     console.log(total)
// }
// sum(range(4, 16))